// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// poisson_lpmf
double poisson_lpmf(const double y, const double mu);
RcppExport SEXP scanstatistics_poisson_lpmf(SEXP ySEXP, SEXP muSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double >::type mu(muSEXP);
    rcpp_result_gen = Rcpp::wrap(poisson_lpmf(y, mu));
    return rcpp_result_gen;
END_RCPP
}
// poisson_loglihood
double poisson_loglihood(const arma::uvec& y, const arma::vec& mu, const double q);
RcppExport SEXP scanstatistics_poisson_loglihood(SEXP ySEXP, SEXP muSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::uvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(poisson_loglihood(y, mu, q));
    return rcpp_result_gen;
END_RCPP
}
// zip_lpmf
double zip_lpmf(const int y, const double mu, const double p);
RcppExport SEXP scanstatistics_zip_lpmf(SEXP ySEXP, SEXP muSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(zip_lpmf(y, mu, p));
    return rcpp_result_gen;
END_RCPP
}
// zip_loglihood
double zip_loglihood(const arma::uvec& y, const arma::vec& mu, const arma::vec& p, const double q);
RcppExport SEXP scanstatistics_zip_loglihood(SEXP ySEXP, SEXP muSEXP, SEXP pSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::uvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(zip_loglihood(y, mu, p, q));
    return rcpp_result_gen;
END_RCPP
}
// calc_all_poisson_eb
Rcpp::DataFrame calc_all_poisson_eb(const arma::umat& counts, const arma::mat& agg_baselines, const arma::uvec& zones, const arma::uvec& zone_lengths);
RcppExport SEXP scanstatistics_calc_all_poisson_eb(SEXP countsSEXP, SEXP agg_baselinesSEXP, SEXP zonesSEXP, SEXP zone_lengthsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::umat& >::type counts(countsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type agg_baselines(agg_baselinesSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type zones(zonesSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type zone_lengths(zone_lengthsSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_all_poisson_eb(counts, agg_baselines, zones, zone_lengths));
    return rcpp_result_gen;
END_RCPP
}
// calc_all_poisson_pb
Rcpp::DataFrame calc_all_poisson_pb(const arma::umat& counts, const arma::mat& agg_baselines, const arma::uvec& zones, const arma::uvec& zone_lengths);
RcppExport SEXP scanstatistics_calc_all_poisson_pb(SEXP countsSEXP, SEXP agg_baselinesSEXP, SEXP zonesSEXP, SEXP zone_lengthsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::umat& >::type counts(countsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type agg_baselines(agg_baselinesSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type zones(zonesSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type zone_lengths(zone_lengthsSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_all_poisson_pb(counts, agg_baselines, zones, zone_lengths));
    return rcpp_result_gen;
END_RCPP
}
// est_zip_zero_indicator
double est_zip_zero_indicator(const double mu, const double p, const double q);
RcppExport SEXP scanstatistics_est_zip_zero_indicator(SEXP muSEXP, SEXP pSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const double >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(est_zip_zero_indicator(mu, p, q));
    return rcpp_result_gen;
END_RCPP
}
// est_eb_zip_relrisk
double est_eb_zip_relrisk(const int y_sum, const arma::vec& mu, const arma::vec& p, const arma::vec& d_hat);
RcppExport SEXP scanstatistics_est_eb_zip_relrisk(SEXP y_sumSEXP, SEXP muSEXP, SEXP pSEXP, SEXP d_hatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type y_sum(y_sumSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type d_hat(d_hatSEXP);
    rcpp_result_gen = Rcpp::wrap(est_eb_zip_relrisk(y_sum, mu, p, d_hat));
    return rcpp_result_gen;
END_RCPP
}
// score_zip_eb
Rcpp::List score_zip_eb(const arma::uvec& y, const arma::vec& mu, const arma::vec& p, const double rel_tol);
RcppExport SEXP scanstatistics_score_zip_eb(SEXP ySEXP, SEXP muSEXP, SEXP pSEXP, SEXP rel_tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::uvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const double >::type rel_tol(rel_tolSEXP);
    rcpp_result_gen = Rcpp::wrap(score_zip_eb(y, mu, p, rel_tol));
    return rcpp_result_gen;
END_RCPP
}
// calc_all_zip_eb
Rcpp::DataFrame calc_all_zip_eb(const arma::umat& counts, const arma::mat& baselines, const arma::mat& probs, const arma::uvec& zones, const arma::uvec& zone_lengths, const double rel_tol);
RcppExport SEXP scanstatistics_calc_all_zip_eb(SEXP countsSEXP, SEXP baselinesSEXP, SEXP probsSEXP, SEXP zonesSEXP, SEXP zone_lengthsSEXP, SEXP rel_tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::umat& >::type counts(countsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type baselines(baselinesSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type probs(probsSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type zones(zonesSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type zone_lengths(zone_lengthsSEXP);
    Rcpp::traits::input_parameter< const double >::type rel_tol(rel_tolSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_all_zip_eb(counts, baselines, probs, zones, zone_lengths, rel_tol));
    return rcpp_result_gen;
END_RCPP
}
// calc_one_zip_eb
Rcpp::DataFrame calc_one_zip_eb(const arma::umat& counts, const arma::mat& baselines, const arma::mat& probs, const arma::uvec& zones, const arma::uvec& zone_lengths, const double rel_tol);
RcppExport SEXP scanstatistics_calc_one_zip_eb(SEXP countsSEXP, SEXP baselinesSEXP, SEXP probsSEXP, SEXP zonesSEXP, SEXP zone_lengthsSEXP, SEXP rel_tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::umat& >::type counts(countsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type baselines(baselinesSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type probs(probsSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type zones(zonesSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type zone_lengths(zone_lengthsSEXP);
    Rcpp::traits::input_parameter< const double >::type rel_tol(rel_tolSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_one_zip_eb(counts, baselines, probs, zones, zone_lengths, rel_tol));
    return rcpp_result_gen;
END_RCPP
}
