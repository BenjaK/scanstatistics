// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// scan_eb_negbin_cpp
Rcpp::List scan_eb_negbin_cpp(const arma::umat& counts, const arma::mat& baselines, const arma::mat& overdisp, const arma::uvec& zones, const arma::uvec& zone_lengths, const bool store_everything, const int num_mcsim, const bool score_hotspot);
RcppExport SEXP _scanstatistics_scan_eb_negbin_cpp(SEXP countsSEXP, SEXP baselinesSEXP, SEXP overdispSEXP, SEXP zonesSEXP, SEXP zone_lengthsSEXP, SEXP store_everythingSEXP, SEXP num_mcsimSEXP, SEXP score_hotspotSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::umat& >::type counts(countsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type baselines(baselinesSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type overdisp(overdispSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type zones(zonesSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type zone_lengths(zone_lengthsSEXP);
    Rcpp::traits::input_parameter< const bool >::type store_everything(store_everythingSEXP);
    Rcpp::traits::input_parameter< const int >::type num_mcsim(num_mcsimSEXP);
    Rcpp::traits::input_parameter< const bool >::type score_hotspot(score_hotspotSEXP);
    rcpp_result_gen = Rcpp::wrap(scan_eb_negbin_cpp(counts, baselines, overdisp, zones, zone_lengths, store_everything, num_mcsim, score_hotspot));
    return rcpp_result_gen;
END_RCPP
}
// scan_eb_poisson_cpp
Rcpp::List scan_eb_poisson_cpp(const arma::umat& counts, const arma::mat& baselines, const arma::uvec& zones, const arma::uvec& zone_lengths, const bool store_everything, const int num_mcsim);
RcppExport SEXP _scanstatistics_scan_eb_poisson_cpp(SEXP countsSEXP, SEXP baselinesSEXP, SEXP zonesSEXP, SEXP zone_lengthsSEXP, SEXP store_everythingSEXP, SEXP num_mcsimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::umat& >::type counts(countsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type baselines(baselinesSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type zones(zonesSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type zone_lengths(zone_lengthsSEXP);
    Rcpp::traits::input_parameter< const bool >::type store_everything(store_everythingSEXP);
    Rcpp::traits::input_parameter< const int >::type num_mcsim(num_mcsimSEXP);
    rcpp_result_gen = Rcpp::wrap(scan_eb_poisson_cpp(counts, baselines, zones, zone_lengths, store_everything, num_mcsim));
    return rcpp_result_gen;
END_RCPP
}
// scan_eb_zip_cpp
Rcpp::List scan_eb_zip_cpp(const arma::umat& counts, const arma::mat& baselines, const arma::mat& probs, const arma::uvec& zones, const arma::uvec& zone_lengths, const double rel_tol, const bool store_everything, const int num_mcsim);
RcppExport SEXP _scanstatistics_scan_eb_zip_cpp(SEXP countsSEXP, SEXP baselinesSEXP, SEXP probsSEXP, SEXP zonesSEXP, SEXP zone_lengthsSEXP, SEXP rel_tolSEXP, SEXP store_everythingSEXP, SEXP num_mcsimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::umat& >::type counts(countsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type baselines(baselinesSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type probs(probsSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type zones(zonesSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type zone_lengths(zone_lengthsSEXP);
    Rcpp::traits::input_parameter< const double >::type rel_tol(rel_tolSEXP);
    Rcpp::traits::input_parameter< const bool >::type store_everything(store_everythingSEXP);
    Rcpp::traits::input_parameter< const int >::type num_mcsim(num_mcsimSEXP);
    rcpp_result_gen = Rcpp::wrap(scan_eb_zip_cpp(counts, baselines, probs, zones, zone_lengths, rel_tol, store_everything, num_mcsim));
    return rcpp_result_gen;
END_RCPP
}
// scan_pb_poisson_cpp
Rcpp::List scan_pb_poisson_cpp(const arma::umat& counts, const arma::mat& baselines, const arma::uvec& zones, const arma::uvec& zone_lengths, const bool store_everything, const int num_mcsim);
RcppExport SEXP _scanstatistics_scan_pb_poisson_cpp(SEXP countsSEXP, SEXP baselinesSEXP, SEXP zonesSEXP, SEXP zone_lengthsSEXP, SEXP store_everythingSEXP, SEXP num_mcsimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::umat& >::type counts(countsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type baselines(baselinesSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type zones(zonesSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type zone_lengths(zone_lengthsSEXP);
    Rcpp::traits::input_parameter< const bool >::type store_everything(store_everythingSEXP);
    Rcpp::traits::input_parameter< const int >::type num_mcsim(num_mcsimSEXP);
    rcpp_result_gen = Rcpp::wrap(scan_pb_poisson_cpp(counts, baselines, zones, zone_lengths, store_everything, num_mcsim));
    return rcpp_result_gen;
END_RCPP
}
// get_zero_indices
std::vector<int> get_zero_indices(const arma::uvec& v);
RcppExport SEXP _scanstatistics_get_zero_indices(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::uvec& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(get_zero_indices(v));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_scanstatistics_scan_eb_negbin_cpp", (DL_FUNC) &_scanstatistics_scan_eb_negbin_cpp, 8},
    {"_scanstatistics_scan_eb_poisson_cpp", (DL_FUNC) &_scanstatistics_scan_eb_poisson_cpp, 6},
    {"_scanstatistics_scan_eb_zip_cpp", (DL_FUNC) &_scanstatistics_scan_eb_zip_cpp, 8},
    {"_scanstatistics_scan_pb_poisson_cpp", (DL_FUNC) &_scanstatistics_scan_pb_poisson_cpp, 6},
    {"_scanstatistics_get_zero_indices", (DL_FUNC) &_scanstatistics_get_zero_indices, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_scanstatistics(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
